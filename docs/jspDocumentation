Hygeia Project
Java Server Page Documentation
Version 1

Table of Contents:

 1. index.jsp
 2. login.jsp
 3. logout.jsp
 4. signup.jsp
 5. home.jsp
 6. error.jsp
 7. inventory.jsp
 8. history.jsp
 9. favorites.jsp
10. profile.jsp
11. recipes.jsp
12. admin.jsp

Purpose: To explain the usage and definition of each page.

Page 1: index.jsp

    The index page is the first page displayed to users. This page should be
    visually appealing and should give users a brief, instantaneous 
    understanding of the website and its functionality. A link the the signup
    page should be present, and a login form should be readily available. This
    page should be accesible to non-logged in users, and should redirect to the
    home page for logged in users.
    
    Workflow:
    
    A. Redirect to home.jsp if logged in (uid session variable is set).
    B. Display logo, information about the site, and a login form. 

Page 2: login.jsp

    The login page performs the authentication of login form. On success,
    the user should be redirected to the home page. This page should be 
    accessible to non-logged in users, and it should appear as a simple page
    with a login form. This page should redirect to the home page for logged in
    users. The email field of the form should be named "email" and the password
    field should be named "password". A hidden field name "login" should be set
    to "login". The page shall determine that a form was submitted by the 
    presence of the "login" field.
    
    Workflow:
    
    A. Redirect to home.jsp if logged in (uid session variable is set).
    B. Check if login parameter is set. If so, call User.login method. Set 
       the uid and username session variables. Redirect to home.jsp. If 
       unsuccessful, redirect to index.jsp?error=true.
    C. Check if error parameter is set. If so, display the login page with
       a message stating login is unsuccessful.
    D. Display the regular login page.
    
Page 3: logout.jsp

    The logout page deletes the current session and redirects the user to the
    index page. No HTML is necessary for this page. 
    
    Workflow:
    
    A. Invalidate (delete) the session.
    B. Redirect to index.jsp.
    
Page 4: signup.jsp

    The signup page processes the signup form and creates a new user in the
    database. After the user is created, the user should be redirected to the
    home page. Logged in users should be redirected to the home page. Non-logged
    in users should be presented with a form that asks for username, email,
    password, height, and weight. Javascript validation should be performed to
    ensure the form is filled out correctly before sending the data to the
    server. The form fields should be named "username", "email", "password",
    "height", "weight". There should also be a hidden field named "signup" that
    is set to "signup". 
    
    Workflow:
    
    A. Redirect to home.jsp if logged in (uid session variable is set).
    B. Check if signup parameter is set. If so, call the User.createUser method.
       If successful, set the uid and username session variables, and redirect
       to home.jsp.
    C. Display the signup page with the signup form. 
    
Page 5: home.jsp

    The home page displays the current meal suggestions to a logged in user. 
    The user should be able to reject a suggestion and receive a new one. The
    navigation bar should be present on this page. For non-logged in users, this
    page should redirect to the index page. A logout form should appear on
    the navigation bar with a hidden field named "logout" set to "logout".
    
    Workflow:
    
    A. Redirect to index.jsp if not logged in (uid session variable is not set).
    B. Create User object from uid.
    C. Create History object and call the getMeals method.
    D. Call the Algorithm.suggestMeal method.
    E. Display the page with the suggested meal and the most recent meals.
    
Page 6: error.jsp

    The error page should process an error code and produce an explanation of
    the error that is helpful to both users and developers. The style of the 
    page does not need to be complex. No database access or use of classes 
    should be used. Error codes should be sent to the page by the get method.
    This page should be visible to logged in and non-logged in users. Error
    codes should be set a parameter named "code". An additional, optional field
    named "echo" may supply a string with additional information to be displayed
    on the page. 
    
    Workflow:
    
    A. Redirect to index.jsp if code parameter is not set.
    B. Display the message associated the error code in the code parameter. If
       the echo parameter is set, display that message as well.
    
Page 7: inventory.jsp

    The inventory page should process all requests to add or remove items from
    a user's inventory. This page should also be able to display the current
    contents of the inventory. The navigation bar should be present on this
    page. Non-logged in users should be redirected to the index page. Food 
    should be added to the inventory by submitting a form with fields "amount".
    The "fid" and "addToInventory" fields should be set as hidden fields, with
    the food id as the first and "addToInventory" as the second. To remove an
    item from the inventory, the same fields should be set, except 
    "addToInventory" should be "removeFromInventory" set to the same value. 
    Adding a new food to the system should be done by a form with the fields,
    "name", "amount", and NUTRITION INFORMATION. A hidden field named 
    "addFoodToDatabase" should also be set. 
    
    Workflow:
    
    A. Redirect to index.jsp if not logged in (uid session variable is not set).
    B. Create User object from uid.
    C. Check if addToInventory parameter is set. If so, create Inventory object
       and call the addFood method, passing a Food object produced from
       the fid and amount parameters. 
    D. Check if the removeFromInventory parameter is set. If so, create the
       Inventory object, and call the removeFood method, passing a Food
       object produced from the iid and amount parameters.
    E. Check if the addFoodToDatabase parameter is set. If so, call the
       Food.createFood method with the name, size, and NUTRITION INFORMATION
       parameters. Create the inventory object and call addFood using the fid
       obtained from createFood and the amount parameter. 
    F. Create the Inventory object and call the getInventory method. Produce
       a table with names and amounts of each food item. Include a form to 
       delete each item. 
    
    
Page 8: history.jsp

    The history page should display a user's history of consumed meals. The 
    navigation bar should be present. Non-logged in users should be redirected
    to the index page. Users should be able to add a meal by filling out a form
    with a hidden field "addMeal" set, with fields "mid" and "occurrence" set
    with the meal id and timestamp that the meal was consumed.
    
    Workflow:
    
    A. Redirect to index.jsp if not logged in (uid session variable is not set).
    B. Create History object.
    C. Check if addMeal parameter is set. If so, create Meal object from mid and
       occurrence parameters. Call the addMeal method of the History object.
    D. Call the getMeals method of the History object. Produce a table listing
       all of the meals and the times they were eaten.
    
Page 9: favorites.jsp

    The favorites page should process all requests to add or remove meals from
    a user's favorites list. This page should also list all of the user's
    favorites. The navigation bar should be present on this page. Non-logged in
    users should be redirected to the index page.
    
    Workflow:
    
    A. Redirect to index.jsp if not logged in (uid session variable is not set).
    B. Create Favorites object. 
    C. Check if the addFavorite parameter is set. If so, call the addFavorite
       method of the Favorites object, passing a Meal object constructed by the
       mid parameter.
    D. Check if the removeFavorite parameter is set. If so, call the 
       removeFavorite method of the Favorites object, passing a Meal object 
       constructed by the mid parameter.
    E. Call the getFavorites method and produce a table of favorites.

Page 10: profile.jsp

    The profile page should process all requests to update a user's profile
    information. It should display all profile information about the user. The
    navigation bar should be present on this page. Non-logged in users should
    be redirected to the index page.
    
    Workflow:
    
    A. Redirect to index.jsp if not logged in (uid session variable is not set).
    B. Create the User object. 
    C. Check if updateProfile parameter is set. If so, call the updateAllInfo 
       method of the User object, passing the username, email, height, and 
       weight parameters.
    D. Call the getAllInfo method to extract profile information from the 
       database. Produce a table with user profile information.
    
Page 11: recipes.jsp

    The recipes page should process all requests to add or remove a 
    user-specified recipe from the system. This page should display all recipes
    available to the user. The navigation bar should be present. Non-logged in
    users should be redirected to the index page.
    
    Workflow:
    
    A. Redirect to index.jsp if not logged in (uid session variable is not set).
    B. 
    
Page 12: admin.jsp

    The admin page is the administrative login page. It should process login
    requests and grant access to administrative features. Non-logged in users
    should be redirected to the index page, and logged in users should be 
    redirected to the home page. 


